from PyQt5.QtWidgets import (QMainWindow, QPushButton, QVBoxLayout, QHBoxLayout,
                           QWidget, QFileDialog, QLabel, QComboBox, QProgressBar,
                           QAction, QListWidget, QListWidgetItem, QTextEdit,
                           QGroupBox, QMessageBox, QMenu, QFrame, QSizePolicy, 
                           QStackedWidget, QSlider, QStyle, QApplication)  # Adicionar QApplication aqui
from PyQt5.QtCore import Qt, QTimer, QUrl
from PyQt5.QtMultimedia import QMediaPlayer, QMediaContent
from PyQt5.QtGui import QIcon, QFont
import json
from pathlib import Path
from worker import AudioProcessingWorker
import sys
import os
from video_player import VideoPlayer
from video_editor.clipchamp_editor import ClipchampEditor

def load_stylesheet(filename):
    """Carrega arquivo CSS"""
    css_file = Path(__file__).parent / 'assets' / 'css' / filename
    if css_file.exists():
        with open(css_file, 'r', encoding='utf-8') as f:
            return f.read()
    return ""

class MainWindow(QMainWindow):
    VIDEO_FORMATS = "*.mp4 *.avi *.mkv *.mov *.wmv *.flv *.webm"

    def __init__(self):
        super().__init__()
        self.setWindowTitle("Audio Extractor and Transcriber")
        self.setGeometry(100, 100, 1400, 800)
        self.current_project = None
        
        # Carregar stylesheet
        self.setStyleSheet(load_stylesheet('gui.css'))
        
        # Widget central com layout horizontal
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.horizontal_layout = QHBoxLayout(self.central_widget)
        self.horizontal_layout.setContentsMargins(0, 0, 0, 0)
        self.horizontal_layout.setSpacing(0)

        # Criar menu lateral e configurar interface
        self.create_sidebar()
        self.setup_ui()
        self.setup_menu()
        self.menu_buttons['editor'] = self.create_menu_button("Editor de V√≠deo", "üé¨", self.show_video_editor)

    def setup_ui(self):
        # Container principal
        self.content_container = QWidget()
        self.content_layout = QVBoxLayout(self.content_container)
        self.content_layout.setContentsMargins(20, 20, 20, 20)
        self.content_layout.setSpacing(15)
        
        # Adicionar ao layout principal
        self.horizontal_layout.addWidget(self.sidebar_frame)
        self.horizontal_layout.addWidget(self.content_container)
        
        # Configurar √°reas
        self.create_viewer_area()
        self.create_transcription_area()
        self.create_projects_area()
        self.create_new_project_area()

    def create_sidebar(self):
        # Frame para o sidebar
        self.sidebar_frame = QFrame()
        self.sidebar_frame.setObjectName("sidebar")
        self.sidebar_frame.setFixedWidth(250)
        sidebar_layout = QVBoxLayout(self.sidebar_frame)
        sidebar_layout.setContentsMargins(0, 0, 0, 0)
        sidebar_layout.setSpacing(0)

        # Logo ou t√≠tulo
        logo_label = QLabel("Audio Extractor")
        logo_label.setObjectName("logo")
        logo_label.setAlignment(Qt.AlignCenter)
        sidebar_layout.addWidget(logo_label)

        # Simplificar menu de bot√µes
        self.menu_buttons = {
            'new_project': self.create_menu_button("Novo Projeto", "‚ûï", lambda: self.show_content(3)),
            'video': self.create_menu_button("Player de V√≠deo", "üé¨", lambda: self.show_content(0)),
            'transcripts': self.create_menu_button("Transcri√ß√£o", "üìù", lambda: self.show_content(1)),
            'projects': self.create_menu_button("Projetos", "üìÅ", lambda: self.show_content(2))
        }
        
        # Adicionar bot√µes ao layout
        for btn in self.menu_buttons.values():
            sidebar_layout.addWidget(btn)

        # Espa√ßadorv
        spacer = QWidget()
        spacer.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        sidebar_layout.addWidget(spacer)

    def create_menu_button(self, text, icon, callback):
        btn = QPushButton(f" {icon} {text}")
        btn.setObjectName("menuButton")
        if callback:
            btn.clicked.connect(callback)
        self.sidebar_frame.layout().addWidget(btn)
        return btn  # Retornar o bot√£o para permitir configura√ß√µes adicionais

    def create_new_project_area(self):
        new_project_container = QWidget()
        new_project_layout = QVBoxLayout(new_project_container)
        new_project_layout.setContentsMargins(20, 20, 20, 20)
        new_project_layout.setSpacing(15)
        
        file_group = QGroupBox("Sele√ß√£o de Arquivo")
        file_layout = QVBoxLayout(file_group)

        self.file_label = QLabel("Selecione um arquivo de v√≠deo")
        self.file_label.setFont(QFont("Roboto", 12))
        file_layout.addWidget(self.file_label)

        select_layout = QHBoxLayout()
        self.select_button = QPushButton("Selecionar V√≠deo")
        self.select_button.setIcon(QIcon("icons/select.png"))
        self.select_button.clicked.connect(self.select_video)
        select_layout.addWidget(self.select_button)

        self.process_button = QPushButton("Processar")
        self.process_button.setIcon(QIcon("icons/process.png"))
        self.process_button.clicked.connect(self.process_video)
        self.process_button.setEnabled(False)
        select_layout.addWidget(self.process_button)

        file_layout.addLayout(select_layout)

        self.language_combo = QComboBox()
        self.language_combo.addItems(["pt", "en", "es", "fr", "de"])
        file_layout.addWidget(self.language_combo)

        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        file_layout.addWidget(self.progress_bar)

        self.status_label = QLabel("")
        file_layout.addWidget(self.status_label)

        new_project_layout.addWidget(file_group)
        self.content_stack.addWidget(new_project_container)  # index 3

    def create_viewer_area(self):
        # Container principal
        self.content_stack = QStackedWidget()
        
        # √Årea de v√≠deo com layout horizontal
        video_container = QWidget()
        video_layout = QHBoxLayout(video_container)
        
        # Lista de v√≠deos (lado esquerdo)
        videos_group = QGroupBox("Arquivos de V√≠deo")
        videos_layout = QVBoxLayout(videos_group)
        
        self.videos_list = QListWidget()
        self.videos_list.itemClicked.connect(self.select_video_from_list)
        videos_layout.addWidget(self.videos_list)
        
        video_layout.addWidget(videos_group, stretch=1)
        
        # Player de v√≠deo (lado direito)
        player_container = QWidget()
        player_layout = QVBoxLayout(player_container)
        self.video_player = VideoPlayer()
        player_layout.addWidget(self.video_player)
        
        # Remover controles de volume duplicados aqui
        video_layout.addWidget(player_container, stretch=2)
        
        self.content_stack.addWidget(video_container)  # index 0
        self.content_layout.addWidget(self.content_stack)

    def create_transcription_area(self):
        # √Årea de transcri√ß√£o
        transcript_container = QWidget()
        transcript_layout = QVBoxLayout(transcript_container)
        
        transcript_buttons = QHBoxLayout()
        self.clear_transcript_btn = QPushButton("Limpar Transcri√ß√£o")
        self.clear_transcript_btn.clicked.connect(self.clear_transcript)
        self.save_transcript_btn = QPushButton("Salvar Transcri√ß√£o")
        self.save_transcript_btn.clicked.connect(self.save_transcript)
        
        transcript_buttons.addWidget(self.clear_transcript_btn)
        transcript_buttons.addWidget(self.save_transcript_btn)
        
        self.transcript_area = QTextEdit()
        self.transcript_area.setReadOnly(False)  # Permitir edi√ß√£o
        
        transcript_layout.addLayout(transcript_buttons)
        transcript_layout.addWidget(self.transcript_area)
        
        self.content_stack.addWidget(transcript_container)  # index 1

    def create_projects_area(self):
        # √Årea de projetos
        projects_container = QWidget()
        projects_layout = QVBoxLayout(projects_container)
        self.previous_projects_list = QListWidget()
        self.previous_projects_list.itemClicked.connect(self.load_previous_project)
        projects_layout.addWidget(self.previous_projects_list)
        
        self.content_stack.addWidget(projects_container)  # index 2

    def select_video(self):
        options = QFileDialog.Options()
        video_filter = f"Arquivos de V√≠deo ({self.VIDEO_FORMATS});;Todos os Arquivos (*)"
        file_name, _ = QFileDialog.getOpenFileName(self, "Selecione um arquivo de v√≠deo", "", video_filter, options=options)
        if file_name:
            self.selected_video = file_name
            self.file_label.setText(f"Arquivo selecionado: {Path(file_name).name}")
            self.process_button.setEnabled(True)  # Habilitar bot√£o de processar

    def process_video(self):
        if hasattr(self, 'selected_video'):
            self.process_button.setEnabled(False)
            self.select_button.setEnabled(False)
            self.progress_bar.setVisible(True)

            self.worker = AudioProcessingWorker(self.selected_video, self.language_combo.currentText())
            self.worker.progress.connect(self.update_progress)
            self.worker.finished.connect(self.on_processing_finished)
            self.worker.error.connect(self.on_error)

            self.worker.start()

    def update_progress(self, value, message):
        self.progress_bar.setValue(value)
        self.status_label.setText(message)

    def on_processing_finished(self, results):
        try:
            self.current_project = results
            self.process_button.setEnabled(True)
            self.select_button.setEnabled(True)
            self.progress_bar.setVisible(False)
            self.status_label.setText("Processamento conclu√≠do!")
            
            # Carregar dados do projeto
            self.load_project_data()
            
            # Mostrar a aba de transcri√ß√£o
            self.show_content(1)  # index 1 √© a aba de transcri√ß√£o
            
        except Exception as e:
            self.on_error(f"Erro ao finalizar processamento: {str(e)}")

    def on_error(self, error_message):
        self.process_button.setEnabled(True)
        self.select_button.setEnabled(True)
        self.progress_bar.setVisible(False)
        self.status_label.setText(f"Erro: {error_message}")
        self.transcript_area.setText(f"Ocorreu um erro durante o processamento:\n\n{error_message}")
        self.show_content(2)

    def load_project_data(self):
        if self.current_project:
            # Carregar transcri√ß√£o
            self.load_transcription()
            
            # Verificar se existe √°udio completo
            audio_file = Path(self.current_project['audio_file'])
            if not audio_file.exists():
                self.status_label.setText("Aviso: Arquivo de √°udio n√£o encontrado")
                return
                
            self.status_label.setText("Projeto carregado com sucesso!")
            
            # Apenas atualizar a lista de v√≠deos sem carregar o v√≠deo
            self.update_videos_list()

    def load_transcription(self):
        """Carrega a transcri√ß√£o do projeto atual"""
        if self.current_project:
            transcript_path = Path(self.current_project['transcripts_dir']) / 'full_audio.json'
            if transcript_path.exists():
                with open(transcript_path, 'r', encoding='utf-8') as f:
                    transcript_data = json.load(f)
                    self.transcript_area.setText(transcript_data.get('transcription', ''))
            else:
                self.transcript_area.clear()

    def show_viewer(self):
        self.show_content(1)
        # Carregar v√≠deo no novo player
        if hasattr(self, 'selected_video'):
            self.video_player.load_video(self.selected_video)

    def play_segment(self, item):
        segment_path = Path(item.data(Qt.UserRole))
        if segment_path.exists():
            if not hasattr(self, 'segment_player'):
                self.segment_player = QMediaPlayer()
            self.segment_player.setMedia(QMediaContent(QUrl.fromLocalFile(str(segment_path))))
            self.segment_player.play()
        else:
            QMessageBox.warning(self, "Erro", "Arquivo de √°udio n√£o encontrado")

    def start_segment_playback(self, media):
        """Inicia a reprodu√ß√£o do segmento garantindo que esteja no in√≠cio"""
        if self.media_player:
            self.media_player.set_time(0)  # For√ßa posi√ß√£o inicial
            self.media_player.play()

    def show_transcripts(self):
        """Mostra a aba de transcri√ß√µes"""
        self.show_content(2)

    def show_segments(self):
        """Mostra a aba de segmentos"""
        self.show_content(0)

    def show_segment_context_menu(self, position):
        menu = QMenu()
        delete_action = menu.addAction("Excluir Segmento")
        action = menu.exec_(self.segments_list.mapToGlobal(position))
        if action == delete_action:
            current_item = self.segments_list.currentItem()
            if current_item:
                self.delete_segment(current_item)

    def delete_segment(self, item):
        try:
            if self.current_project:
                segment_path = Path(self.current_project['segments_dir']) / item.text()
                if segment_path.exists():
                    segment_path.unlink()
                    self.segments_list.takeItem(self.segments_list.row(item))
                    QMessageBox.information(self, "Sucesso", "Segmento exclu√≠do com sucesso!")
        except Exception as e:
            QMessageBox.warning(self, "Erro", f"Erro ao excluir segmento: {str(e)}")

    def clear_transcript(self):
        reply = QMessageBox.question(self, "Confirmar", "Deseja limpar a transcri√ß√£o atual?",
                                   QMessageBox.Yes | QMessageBox.No)
        if reply == QMessageBox.Yes:
            self.transcript_area.clear()

    def save_transcript(self):
        try:
            if self.current_project:
                transcript_path = Path(self.current_project['transcripts_dir']) / 'full_audio.json'
                transcript_data = {
                    'transcription': self.transcript_area.toPlainText(),
                    'audio_file': 'full_audio.wav',
                    'language': self.language_combo.currentText()
                }
                with open(transcript_path, 'w', encoding='utf-8') as f:
                    json.dump(transcript_data, f, ensure_ascii=False, indent=2)
                
                QMessageBox.information(self, "Sucesso", "Transcri√ß√£o salva com sucesso!")
        except Exception as e:
            QMessageBox.warning(self, "Erro", f"Erro ao salvar transcri√ß√£o: {str(e)}")

    def refresh_projects_list(self):
        """Atualiza a lista de projetos de forma otimizada"""
        try:
            projects_dir = Path(__file__).parent / 'projects'
            if not projects_dir.exists():
                return

            # Desabilitar atualiza√ß√µes visuais durante o preenchimento
            self.previous_projects_list.setUpdatesEnabled(False)
            self.previous_projects_list.clear()

            # Usar listdir em vez de glob para melhor performance
            project_dirs = []
            for item in os.listdir(str(projects_dir)):
                item_path = projects_dir / item
                if item_path.is_dir():
                    project_dirs.append(item)

            # Ordenar por data de modifica√ß√£o (mais recente primeiro)
            project_dirs.sort(key=lambda x: os.path.getmtime(str(projects_dir / x)), reverse=True)

            # Adicionar itens em lote
            self.previous_projects_list.addItems(project_dirs)

            # Reabilitar atualiza√ß√µes visuais
            self.previous_projects_list.setUpdatesEnabled(True)

        except Exception as e:
            QMessageBox.warning(self, "Erro", f"Erro ao atualizar lista de projetos: {str(e)}")

    def load_previous_project(self, project_item):
        try:
            if isinstance(project_item, Path):
                project_dir = project_item
            else:
                project_dir = Path(__file__).parent / 'projects' / project_item.text()

            if not project_dir.exists():
                raise Exception("Diret√≥rio do projeto n√£o encontrado")

            # Procurar arquivos necess√°rios
            original_dir = project_dir / 'original'
            segments_dir = project_dir / 'segments'
            
            # Procurar v√≠deo original e √°udio
            video_files = list(original_dir.glob('*.*'))
            video_files = [f for f in video_files if f.suffix.lower() in 
                          ['.mp4', '.avi', '.mkv', '.mov', '.wmv', '.flv']]
            
            if not video_files:
                raise Exception("V√≠deo original n√£o encontrado")
                
            video_file = video_files[0]  # Usar o primeiro v√≠deo encontrado
            audio_file = segments_dir / 'full_audio.wav'

            if not video_file.exists() or not audio_file.exists():
                raise Exception("Arquivos de v√≠deo ou √°udio n√£o encontrados")

            self.current_project = {
                'original_video': str(video_file),
                'audio_file': str(audio_file),
                'segments_dir': str(segments_dir),
                'transcripts_dir': str(project_dir / 'transcripts'),
                'original_dir': str(original_dir),
                'project_id': project_dir.name
            }

            self.selected_video = str(video_file)
            self.file_label.setText(f"Projeto carregado: {project_dir.name}")
            self.load_project_data()
            self.show_viewer()
            QMessageBox.information(self, "Sucesso", "Projeto carregado com sucesso!")

        except Exception as e:
            QMessageBox.warning(self, "Erro", f"Erro ao carregar projeto: {str(e)}")

    def show_editor(self):
        """Mostra a aba do editor de segmentos"""
        self.show_content(4)  # √çndice do editor de segmentos

    def handle_media_error(self, error):
        """Trata erros do media player"""
        error_msg = "Erro desconhecido"
        if error == QMediaPlayer.FormatError:
            error_msg = "Formato de m√≠dia n√£o suportado"
        elif error == QMediaPlayer.NetworkError:
            error_msg = "Erro de rede"
        elif error == QMediaPlayer.ResourceError:
            error_msg = "Recurso n√£o encontrado"
        QMessageBox.warning(self, "Erro de Reprodu√ß√£o", error_msg)

    def open_editor(self):
        """Abre o editor de v√≠deo com o projeto atual"""
        if self.current_project:
            video_file = Path(self.current_project['original_video'])
            audio_file = Path(self.current_project['audio_file'])
            
            if video_file.exists() and audio_file.exists():
                self.editor = ClipchampEditor(self.current_project)
                self.editor.show()
            else:
                QMessageBox.warning(self, "Aviso", "Arquivos de v√≠deo ou √°udio n√£o encontrados.")
        else:
            QMessageBox.warning(self, "Aviso", "Nenhum projeto carregado.")

    def segment_selected(self, item):
        """Callback quando um segmento √© selecionado"""
        segment_path = Path(item.data(Qt.UserRole))
        if segment_path.exists():
            # Atualizar label com informa√ß√µes do segmento
            self.current_segment_label.setText(f"Segmento: {segment_path.name}")
            
            # Habilitar controles
            for btn in [self.segment_play_btn, self.segment_stop_btn, self.segment_delete_btn]:
                btn.setEnabled(True)

            if not hasattr(self, 'segment_player'):
                self.segment_player = QMediaPlayer()
            self.segment_player.setMedia(QMediaContent(QUrl.fromLocalFile(str(segment_path))))

    def toggle_segment_playback(self):
        """Alterna entre play/pause do segmento"""
        if hasattr(self, 'segment_player'):
            if self.segment_player.state() == QMediaPlayer.PlayingState:
                self.segment_player.pause()
                self.segment_play_btn.setText("‚èµ")
                self.segment_play_btn.setChecked(False)
            else:
                self.segment_player.play()
                self.segment_play_btn.setText("‚è∏")
                self.segment_play_btn.setChecked(True)

    def stop_segment(self):
        """Para a reprodu√ß√£o do segmento"""
        if hasattr(self, 'segment_player'):
            self.segment_player.stop()
            self.segment_play_btn.setText("‚èµ")
            self.segment_play_btn.setChecked(False)

    def update_segment_progress(self):
        """Atualiza a barra de progresso do segmento"""
        if not self.media_player:
            return

        length = self.media_player.get_length()
        if length > 0:
            self.segment_progress.setMaximum(length)
            self.segment_progress.setValue(self.media_player.get_time())

    def delete_current_segment(self):
        """Exclui o segmento selecionado"""
        current_item = self.segments_list.currentItem()
        if current_item:
            reply = QMessageBox.question(
                self,
                "Confirmar Exclus√£o",
                "Tem certeza que deseja excluir este segmento?",
                QMessageBox.Yes | QMessageBox.No
            )
            
            if reply == QMessageBox.Yes:
                try:
                    segment_path = Path(current_item.data(Qt.UserRole))
                    if segment_path.exists():
                        segment_path.unlink()
                        self.stop_segment()
                        self.segments_list.takeItem(self.segments_list.row(current_item))
                        self.current_segment_label.setText("Nenhum segmento selecionado")
                        for btn in [self.segment_play_btn, self.segment_stop_btn, self.segment_delete_btn]:
                            btn.setEnabled(False)
                        QMessageBox.information(self, "Sucesso", "Segmento exclu√≠do com sucesso!")
                except Exception as e:
                    QMessageBox.warning(self, "Erro", f"Erro ao excluir segmento: {str(e)}")

    def show_content(self, index):
        """Mostra o conte√∫do correspondente ao bot√£o clicado"""
        # Desmarcar todos os bot√µes
        for btn in self.menu_buttons.values():
            if hasattr(btn, 'setChecked'):
                btn.setChecked(False)

        # Marcar o bot√£o atual
        sender = self.sender()
        if sender and hasattr(sender, 'setChecked'):
            sender.setChecked(True)
        
        # Mostrar o widget correspondente
        self.content_stack.setCurrentIndex(index)
        
        # Atualizar dados se necess√°rio
        if index == 2:  # Projects tab
            QApplication.setOverrideCursor(Qt.WaitCursor)  # Mostrar cursor de espera
            try:
                self.refresh_projects_list()
            finally:
                QApplication.restoreOverrideCursor()  # Restaurar cursor normal

    def change_video_source(self, index):
        if self.current_project:
            try:
                # Usar sempre o v√≠deo original
                video_file = Path(self.current_project['original_video'])
                
                if video_file.exists():
                    print(f"Carregando v√≠deo: {video_file}")  # Debug
                    self.video_player.load_video(str(video_file))
                else:
                    QMessageBox.warning(self, "Erro", f"Arquivo n√£o encontrado: {video_file}")
                    self.video_options.setCurrentIndex(0)
            
            except Exception as e:
                print(f"Erro detalhado: {str(e)}")  # Debug
                QMessageBox.warning(self, "Erro", f"Erro ao trocar fonte do v√≠deo: {str(e)}")
                self.video_options.setCurrentIndex(0)

    def setup_menu(self):
        """Configura o menu da aplica√ß√£o"""
        menubar = self.menuBar()
        self.projects_menu = menubar.addMenu('&Projetos')
        
        # A√ß√£o para atualizar lista de projetos
        self.refresh_projects_action = QAction('Atualizar Lista', self)
        self.refresh_projects_action.triggered.connect(self.refresh_projects_list)
        self.projects_menu.addAction(self.refresh_projects_action)

    def update_videos_list(self):
        """Atualiza a lista de v√≠deos dispon√≠veis no projeto atual"""
        if not self.current_project:
            return
            
        self.videos_list.clear()
        
        try:
            # Adicionar v√≠deo original
            original_video = Path(self.current_project['original_video'])
            if (original_video.exists()):
                item = QListWidgetItem(f"üìº {original_video.name}")
                item.setData(Qt.UserRole, str(original_video))
                self.videos_list.addItem(item)
                
        except Exception as e:
            print(f"Erro ao atualizar lista de v√≠deos: {e}")

    def select_video_from_list(self, item):
        """Seleciona o v√≠deo da lista mas n√£o carrega automaticamente"""
        video_path = item.data(Qt.UserRole)
        if video_path:
            self.video_player.selected_video = video_path  # Apenas armazena o caminho
            print(f"V√≠deo selecionado: {video_path}")

    def play_selected_video(self):
        """Carrega e reproduz o v√≠deo selecionado"""
        if hasattr(self.video_player, 'selected_video'):
            self.video_player.load_video(self.video_player.selected_video)
            self.video_player.play()

    def show_video_editor(self):
        """Abre o editor de v√≠deo com o projeto atual"""
        if self.current_project:
            self.editor_window = ClipchampEditor(self.current_project)
            self.editor_window.show()
        else:
            QMessageBox.warning(self, "Aviso", "Por favor, carregue um projeto primeiro.")
